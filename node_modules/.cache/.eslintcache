[{"D:\\Projects\\quizapp-2.0\\src\\index.js":"1","D:\\Projects\\quizapp-2.0\\src\\reportWebVitals.js":"2","D:\\Projects\\quizapp-2.0\\src\\App.js":"3","D:\\Projects\\quizapp-2.0\\src\\ResultsPage.js":"4","D:\\Projects\\quizapp-2.0\\src\\InstructionsPage.js":"5","D:\\Projects\\quizapp-2.0\\src\\QuizPage.js":"6","D:\\Projects\\quizapp-2.0\\src\\ModalInstructions.js":"7","D:\\Projects\\quizapp-2.0\\src\\PromotionPage.js":"8"},{"size":608,"mtime":1732469360555,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1697553360539,"results":"11","hashOfConfig":"10"},{"size":1510,"mtime":1708353206946,"results":"12","hashOfConfig":"10"},{"size":5210,"mtime":1732709756789,"results":"13","hashOfConfig":"10"},{"size":5847,"mtime":1708353342055,"results":"14","hashOfConfig":"10"},{"size":13588,"mtime":1732709721880,"results":"15","hashOfConfig":"10"},{"size":5393,"mtime":1698163111692,"results":"16","hashOfConfig":"10"},{"size":1690,"mtime":1698163244009,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"75yur0",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\quizapp-2.0\\src\\index.js",[],[],"D:\\Projects\\quizapp-2.0\\src\\reportWebVitals.js",[],[],"D:\\Projects\\quizapp-2.0\\src\\App.js",[],[],"D:\\Projects\\quizapp-2.0\\src\\ResultsPage.js",["44"],[],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext, useEffect } from 'react'\r\nimport $ from 'jquery'\r\nimport {attemptDateContext} from './InstructionsPage'\r\n\r\nfunction ResultsPage(props) {\r\n\r\n    // usecontext Hook used to display the attempt date & time of the user :)\r\n    const start=useContext(attemptDateContext)\r\n\r\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October','November', 'December']\r\n\r\n    useEffect(()=>{\r\n\r\n        console.log(start+\"empty\")\r\n\r\n        // set the background height :)\r\n        let bgheight=$('.setBgHeight').innerHeight()\r\n        \r\n        $('#resultsBg').css({height:bgheight})\r\n\r\n        window.addEventListener('resize',()=>{\r\n            $('#resultsBg').css({height:$('.setBgHeight').innerHeight()})\r\n        })\r\n\r\n        setTimeDate()\r\n\r\n    },[])\r\n\r\n    // display date & time :)\r\n    const setTimeDate=()=>{\r\n        const date=new Date()\r\n\r\n        const startdateELe=document.querySelector('#startDate h6')\r\n        const enddateELe=document.querySelector('#endDate h6')\r\n        const todaydate=date.getDate()\r\n\r\n        const month=date.getMonth()\r\n        const hours=date.getHours()\r\n        const minutes=(date.getMinutes()<10)?`0${date.getMinutes()}`:`${date.getSeconds()}`\r\n        const zone=(hours>=12)?'PM':'AM'\r\n\r\n        console.log(hours+\":\"+minutes +\" \"+zone);\r\n        \r\n        startdateELe.textContent=todaydate+\"-\"+monthNames[month]+\" / \"+start\r\n        enddateELe.textContent=todaydate+\"-\"+monthNames[month]+\" / \"+hours+\":\"+minutes +\" \"+zone\r\n    }\r\n\r\n    // print the Quiz results :)\r\n    const downloadResults=()=>{\r\n        window.print()\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='d-flex flex-wrap justify-content-between sticky-top py-2'>\r\n                <h4 className='ms-4'>Quizz</h4>\r\n                <h4 className='text-end me-4'><i className=\"fa-solid fa-user-tie me-2\"></i>{props.userName}</h4>\r\n            </div>   \r\n\r\n            <div className='col-12 setBgHeight'>\r\n                \r\n                <div className='' id='resultsBg'>\r\n\r\n                    <div className='container d-flex flex-column text-dark text-center'>\r\n\r\n                        <h4 className='mt-4'>JavaScript Quiz Report <i className=\"fa-solid fa-crown text-warning h3\"></i></h4>\r\n                        <small>Duration 20 Minutes</small>\r\n\r\n                        {/* Quiz restart */}\r\n                        <div className='mt-4'>\r\n                            <a href='https://laxmanarao2003.github.io/Quiz/' className='btn btn-primary rounded rounded-5 px-4 py-2 mx-2 my-1'>Restart<i className=\"fa-solid fa-rotate ms-2\"></i></a>\r\n                            <button onClick={downloadResults} className='btn btn-primary rounded rounded-5 px-4 py-2 mx-2 my-1'>Download<i className=\"fa-solid fa-download ms-2\"></i></button>\r\n                        </div>\r\n\r\n                        <div className='d-flex flex-wrap align-items-center justify-content-between border border-2 rounded rounded-3 px-4 py-1 my-4'>\r\n\r\n                            {/* Attemp date & time */}\r\n                            <div className='d-flex flex-column col-xl-2 col-lg-2 col-md-5 col-sm-5 col-5 my-3 py-4 px-2' id='startDate'>\r\n                                <small><i className=\"fa-solid fa-calendar-days text-success h6 me-2\"></i>Attempt Date/Time</small>\r\n                                <h6> </h6>\r\n                            </div>\r\n\r\n                            {/* Submission Date/Time */}\r\n                            <div className='d-flex flex-column col-xl-2 col-lg-2 col-md-5 col-sm-5 col-5 my-3 py-4 px-2' id='endDate'>\r\n                                <small><i className=\"fa-regular fa-clock text-success h6 me-2\"></i>Submission Date/Time</small>\r\n                                <h6> </h6>\r\n                            </div>\r\n\r\n                            {/* passing marks */}\r\n                            <div className='d-flex flex-column col-xl-2 col-lg-2 col-md-5 col-sm-5 col-5 my-3 py-4 px-2' id='passingMarks'>\r\n                                <small><i className=\"fa-solid fa-trophy text-success h6 me-2\"></i>passing marks</small>\r\n                                <h6>{props.marks}.0/20.0</h6>\r\n                            </div>\r\n\r\n                            {/* Status Pass/Fail */}\r\n                            <div className='d-flex flex-column col-xl-2 col-lg-2 col-md-5 col-sm-5 col-5 my-3 py-4 px-2' id='status'>\r\n                                <small><i className=\"fa-solid fa-award text-success h6 me-2\"></i>Status</small>\r\n                                {\r\n                                    (props.marks>10)? <h6>Pass</h6>:<h6>Fail</h6>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='mb-4 mt-2'>\r\n                            <img src='https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcT30vhJ2gdgFa_d0bOsat1JUIPYunbKXJqhYOrC88dTzTcnPf65' alt='Wallpaper'/>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResultsPage","D:\\Projects\\quizapp-2.0\\src\\InstructionsPage.js",[],[],"D:\\Projects\\quizapp-2.0\\src\\QuizPage.js",["45"],["46"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport axios from 'axios'\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport $ from 'jquery'\r\nimport ModalInstructions from './ModalInstructions'\r\nimport PromotionPage from './PromotionPage'\r\nimport ResultsPage from './ResultsPage'\r\n\r\nfunction QuizPage(props) {\r\n\r\n    const [data,setData]=useState([])\r\n\r\n    // const [userAnswers,setUserAnswers]=useState([])\r\n\r\n    // userAnswers that are given when the quiz starts :)\r\n    const userAnswers=[]\r\n\r\n    // Api answers that are built in:)\r\n    const apiAnswers=[]\r\n\r\n    // user marks :)\r\n    const marks=useRef(0)\r\n\r\n    const [submitData,setSubmitData]=useState(false)\r\n\r\n    // define the count Interval for the countdown timer :)\r\n    let countInterval\r\n\r\n    // count the number of questions, which helps us to allocate id's to the question :)\r\n    let questionCount=0\r\n\r\n    // create useRef Hook for promotion, which stores the mutable value even if the component re-renders:)\r\n    let btnClicked=useRef()\r\n\r\n    // different API'S based on the user Selection :)\r\n    const quizApi=`https://quizapi.io/api/v1/questions?apiKey=P7mSuG2QyMCPnS5zWo3iYBVLH61UG1M7OMt1SDHf&difficulty=Easy&limit=20&tags=${props.language}`\r\n\r\n    useEffect(()=>{\r\n\r\n        console.log('useeffect');\r\n\r\n        // call fetchApi function when component renders everytime :)\r\n        fetchApi()\r\n\r\n        // call countDown function when component(quizPage) renders everytime :)\r\n        countDown()\r\n\r\n        btnClicked.current=true\r\n\r\n        window.addEventListener('scroll',()=>{\r\n            const scrollHeight=document.documentElement.scrollTop\r\n            if(scrollHeight<320)\r\n                $('#scrollToTop').css({display:'none'})\r\n            else\r\n                $('#scrollToTop').css({display:'block'})            \r\n        })\r\n        \r\n        if(submitData)\r\n            clearInterval(countInterval)\r\n\r\n        // when clicking on the promotion button it will toggle the social media buttons :)\r\n        const promotionbtn=document.querySelector('#promotionBtn')\r\n        promotionbtn.addEventListener('click',()=>{\r\n            if(btnClicked.current===true){\r\n                $('#promotion').css({display:'block'})\r\n                $('#promotion').addClass('d-flex')\r\n                btnClicked.current=false\r\n            }\r\n            else{\r\n                $('#promotion').css({display:'none'})\r\n                $('#promotion').removeClass('d-flex')\r\n                btnClicked.current=true\r\n            }\r\n        })\r\n       \r\n\r\n        \r\n        return ()=>{\r\n            \r\n            // We have to clear the setInterval when the Component is destroyed :)\r\n            clearInterval(countInterval)\r\n        }\r\n\r\n    },[])\r\n\r\n    // Fetch the API data using axios and asynchronous method :)\r\n    const fetchApi=async()=>{\r\n\r\n        try{\r\n            const responseApi=await axios.get(quizApi)\r\n            console.log(responseApi.data)\r\n            setData(responseApi.data)\r\n        }\r\n        catch(err){\r\n            console.log('Network error')\r\n            alert('Network error')\r\n        }\r\n\r\n    }\r\n\r\n    // set the coundown time to the user :)\r\n    const countDown=()=>{\r\n        const countDownEle=document.querySelector('div #countDown')\r\n        let seconds=0\r\n        let minutes=20\r\n\r\n        countInterval=setInterval(()=>{\r\n            \r\n\r\n            /* 4 constraints\r\n            *   seconds<10 -> minutes>9 & minutes<10\r\n            *   seconds>10 -> minutes>9 & minutes<10\r\n            */\r\n            countDownEle.textContent=(seconds<10)?\r\n                                                ((minutes>9)? minutes+\":0\"+seconds   :   \"0\"+minutes+\":0\"+seconds )  \r\n                                                :   \r\n                                                (minutes>9)? minutes+\":\"+seconds   :   \"0\"+minutes+\":\"+seconds\r\n\r\n            // when seconds hits zero we need to decrease the minutes :)\r\n            if(seconds===0){\r\n                minutes--\r\n                seconds=60\r\n            }\r\n\r\n            seconds--\r\n        },1000)\r\n\r\n    }\r\n\r\n    // rendering questions to the browser :)\r\n    const addQuestions = (option,optionNum)=>{ // it accepts 2 parameters -> option value(label) & -> option number :)\r\n\r\n        return  <div className='rounded rounded-3 py-2 px-2 mb-4 mt-1 optionParent'>\r\n                    {/*  render input (radio) elements */}\r\n                    <input\r\n                        type='radio'\r\n                        name='options'\r\n                        className='form-check-input ms-3 option'\r\n                        value={option}\r\n                        \r\n                        onChange={(e)=>checkInputEle(e)}\r\n                        id={`q${questionCount}opt${optionNum}`}\r\n                    />\r\n                    <label className='ms-2' htmlFor={`q${questionCount}opt${optionNum}`}>{option}</label>\r\n                </div>\r\n    }\r\n\r\n    const checkInputEle=(e)=>{\r\n        \r\n        // setUserAnswers([...userAnswers,e.target.id])\r\n\r\n        let questionNum=e.target.id\r\n        let optionNum=e.target.id\r\n\r\n        // for 2 digits question Number -> q12option3 \r\n        if(Number(questionNum.substring(1,3))){\r\n            questionNum=Number(questionNum.substring(1,3))\r\n            optionNum=Number(optionNum.substring(6,8))+96\r\n        }\r\n        // for 1 digit question Number -> q1option3 \r\n        else{\r\n            questionNum=Number(questionNum.charAt(1))\r\n            optionNum=Number(optionNum.charAt(5))+96\r\n        }\r\n\r\n        // concatenate the string as previously assigned in the api options :)\r\n        const optionChar=`answer_${String.fromCharCode(optionNum)}_correct`\r\n\r\n        //  store the user options in the userAnswers array :)\r\n        //  Every index acts as a question number like 1st index(question 1)=option1 ,..... :)\r\n        userAnswers[questionNum]=optionChar\r\n\r\n        return e.target.checked\r\n    }\r\n\r\n    const submitQuiz=()=>{\r\n\r\n        data.map((item,index)=>{\r\n            const ele=item.correct_answers\r\n            \r\n            // check the options that are defined in the api options , which option is correct for each & every question:)\r\n            if(ele.answer_a_correct===\"true\")\r\n                apiAnswers[index+1]=\"answer_a_correct\"\r\n            else if(ele.answer_b_correct===\"true\")\r\n                apiAnswers[index+1]=\"answer_b_correct\"\r\n            else if(ele.answer_c_correct===\"true\")\r\n                apiAnswers[index+1]=\"answer_c_correct\"\r\n            else if(ele.answer_d_correct===\"true\")\r\n                apiAnswers[index+1]=\"answer_d_correct\"\r\n            else if(ele.answer_e_correct===\"true\")\r\n                apiAnswers[index+1]=\"answer_e_correct\"\r\n            else if(ele.answer_f_correct===\"true\")\r\n                apiAnswers[index+1]=\"answer_f_correct\"\r\n            return true\r\n        })\r\n\r\n        // compare answers with correct answers & then increment marks counter :)\r\n        for(let start=1;start<apiAnswers.length;start++){\r\n            if(apiAnswers[start]===userAnswers[start])\r\n                marks.current+=1\r\n        }\r\n        \r\n        // render the ResultsPage Component :)\r\n        setSubmitData(true)\r\n    }\r\n     \r\n    return (\r\n        (!submitData)?\r\n            <>\r\n                <div className='d-flex flex-wrap justify-content-between sticky-top py-2'>\r\n                    <h4 className='ms-4'>Quizz</h4>\r\n                    <div className='d-flex align-items-center'>\r\n                        <i className=\"fa-regular fa-clock me-2 h5\"></i>\r\n                        <h4 className='text-center' id='countDown'>20:00</h4>\r\n                    </div>\r\n                    <h4 className='text-end me-4'><i className=\"fa-solid fa-user-tie me-2\"></i>{props.userName}</h4>\r\n                    \r\n                </div>\r\n\r\n                {\r\n                    userAnswers.map((user,index) =>{return <h5 key={index}>{user}</h5>})\r\n                } \r\n\r\n                {/* <!-- Modal Button --> */}\r\n                <div className='d-flex justify-content-center mt-4'>\r\n                    <div className='col-9 col-xxl-5 col-xl-6 col-lg-7 col-md-8' id='title'>\r\n                        <h3 className='py-3 px-4 my-2'>Online test  <button className='btn btn-primary rounded rounded-5 my-2' data-bs-toggle=\"modal\" data-bs-target=\"#exampleModal\">Instructions<i className=\"fa-solid fa-clipboard ms-2\" title='Instructions'></i></button></h3>\r\n                    </div>\r\n                </div>\r\n                \r\n                {/* <!-- Instructions Modal --> */}\r\n                <ModalInstructions/>\r\n\r\n                {/* rendering Questions */}\r\n                <div className='d-flex justify-content-center mt-3'>\r\n                    <div className='col-9 col-xxl-5 col-xl-6 col-lg-7 col-md-8 pb-3'>\r\n\r\n                        {   \r\n                            data.map((item,index)=>{\r\n\r\n                                const question= item.question\r\n                                questionCount=questionCount+1\r\n\r\n                                return <form key={index} className='rounded rounded-3 px-4 mt-3 mb-4 py-4' id='borderEle'>\r\n                                            <div className='text-start rounded rounded-4 mb-4 mt-2 '>\r\n                                                <p id={`question${questionCount}`} className='question py-2 px-3'>{questionCount}. {question}<sup> *</sup></p>\r\n                                            </div>\r\n                                            <div className='d-flex justify-content-between flex-column'>\r\n\r\n                                                {/* check how many options that are available to each question */}\r\n                                                {\r\n                                                    (item.answers.answer_a)?addQuestions(item.answers.answer_a,1):''\r\n                                                }\r\n                                                {\r\n                                                    (item.answers.answer_b)?addQuestions(item.answers.answer_b,2):''\r\n                                                }\r\n                                        \r\n                                                {\r\n                                                    (item.answers.answer_c)?addQuestions(item.answers.answer_c,3):''\r\n                                                }\r\n                                            \r\n                                                {\r\n                                                    (item.answers.answer_d)?addQuestions(item.answers.answer_d,4):''\r\n                                                }\r\n                                                {\r\n                                                    (item.answers.answer_e)?addQuestions(item.answers.answer_e,5):''\r\n                                                }\r\n                                                {\r\n                                                    (item.answers.answer_f)?addQuestions(item.answers.answer_f,6):''\r\n                                                }\r\n\r\n                                            </div>\r\n                                        </form>\r\n                                \r\n                            })\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className='text-center my-5'>\r\n                    <a href='#submitmodal' className='btn btn-primary rounded rounded-5 px-4 py-2' data-bs-toggle=\"modal\">Submit<i className=\"fa-regular fa-paper-plane ms-2\"></i></a>\r\n                </div>\r\n\r\n\r\n                {/* <!------------------------------modal submit------------------------------------> */}\r\n                <div className=\"modal fade\" id=\"submitmodal\">\r\n                    <div className=\"modal-dialog modal-dialog-centered\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <button className=\"btn btn-danger btn-close\" data-bs-dismiss=\"modal\"></button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <h3 className=\"text-center pb-4\">Submit Quiz</h3>\r\n                                <h6 className=\"text-center\" style={{letterSpacing: \"1px\"}}>When You are Ready, Click Submit Button</h6>\r\n                                <div className=\"btn-group btn-group-vertical d-flex justify-content-center\">\r\n                                    <button className=\"btn btn-success mt-4 mb-3\" onClick={()=>submitQuiz()}  data-bs-dismiss=\"modal\">\r\n                                        Submit<span className=\"\" id=\"submit_span\"></span>\r\n                                    </button>\r\n                                    <button className=\"btn btn-light mb-3\" data-bs-dismiss=\"modal\">Cancel</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Navigate (Scroll) to top Button */}\r\n                <div className='text-end fixed-bottom me-3 mb-3' id='scrollToTop'>\r\n                    <a href='#' className='btn btn-outline-primary'><i className=\"fa-solid fa-angles-up\"></i></a>\r\n                </div>\r\n                \r\n                {/* Promotion Page */}\r\n                <PromotionPage/>\r\n\r\n            </>\r\n        :\r\n\r\n        <ResultsPage marks={marks.current} userName={props.userName}/>\r\n    )\r\n}\r\n\r\nexport default QuizPage","D:\\Projects\\quizapp-2.0\\src\\ModalInstructions.js",[],[],"D:\\Projects\\quizapp-2.0\\src\\PromotionPage.js",[],[],{"ruleId":"47","severity":1,"message":"48","line":28,"column":7,"nodeType":"49","endLine":28,"endColumn":9,"suggestions":"50"},{"ruleId":"47","severity":1,"message":"51","line":84,"column":7,"nodeType":"49","endLine":84,"endColumn":9,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":309,"column":21,"nodeType":"55","endLine":309,"endColumn":69,"suppressions":"56"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setTimeDate' and 'start'. Either include them or remove the dependency array.","ArrayExpression",["57"],"React Hook useEffect has missing dependencies: 'countDown', 'countInterval', 'fetchApi', and 'submitData'. Either include them or remove the dependency array.",["58"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["59"],{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},{"kind":"64","justification":"65"},"Update the dependencies array to be: [setTimeDate, start]",{"range":"66","text":"67"},"Update the dependencies array to be: [countDown, countInterval, fetchApi, submitData]",{"range":"68","text":"69"},"directive","",[876,878],"[setTimeDate, start]",[2740,2742],"[countDown, countInterval, fetchApi, submitData]"]